/*
 * Licensed to Elasticsearch under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.elasticsearch.index.mapper;

import org.apache.lucene.analysis.MockAnalyzer;
import org.apache.lucene.index.IndexableField;
import org.apache.lucene.index.IndexReader;
import org.apache.lucene.index.memory.MemoryIndex;
import org.elasticsearch.common.CheckedConsumer;
import org.elasticsearch.common.Strings;
import org.elasticsearch.common.bytes.BytesReference;
import org.elasticsearch.common.compress.CompressedXContent;
import org.elasticsearch.common.xcontent.XContentBuilder;
import org.elasticsearch.common.xcontent.XContentFactory;
import org.elasticsearch.common.xcontent.XContentType;
import org.elasticsearch.index.IndexService;
import org.elasticsearch.index.fieldvisitor.FieldsVisitor;
import org.elasticsearch.index.fieldvisitor.SourceLoader;
import org.elasticsearch.index.mapper.ParseContext.Document;
import org.elasticsearch.test.ESSingleNodeTestCase;
import org.junit.Before;

import java.io.IOException;
import java.util.Collection;
import java.util.Set;

import static org.hamcrest.Matchers.hasSize;

/**
 * Infrastructure for testing mappers that support field relocation.
 */
public abstract class AbstractFieldRelocationTestCase extends ESSingleNodeTestCase {
    private IndexService indexService;
    private DocumentMapperParser parser;

    protected abstract String fieldType();
    protected abstract void writeRandomValue(XContentBuilder builder) throws IOException;

    protected void extraMappingConfiguration(XContentBuilder builder) throws IOException {}

    @Before
    public void setup() {
        indexService = createIndex("test");
        parser = indexService.mapperService().documentMapperParser();
    }

    /**
     * Saves a document using field relocation, fetches the {@ _source},
     * indexes that, then verifies that both index operations produce the
     * same fields.
     */
    public final void testRoundTrip() throws IOException {
        DocumentMapper docMapper = parser.parse("_doc", relocateToDocValueMapping());

        XContentBuilder builder = XContentFactory.jsonBuilder();
        builder.startObject().field("field");
        writeRandomValue(builder);
        builder.endObject();
        BytesReference originalSource = BytesReference.bytes(builder);

        ParsedDocument firstTimeDoc = docMapper.parse(
                SourceToParse.source("test", "_doc", "1", originalSource, XContentType.JSON));
        IndexReader firstTimeReader = MemoryIndex.fromDocument(firstTimeDoc.rootDoc(), new MockAnalyzer(random()))
                .createSearcher().getIndexReader();
        BytesReference firstTimeSourceBytes = fromIndex(docMapper, firstTimeReader);
        String firstTimeSource = firstTimeSourceBytes.utf8ToString();

        ParsedDocument secondTimeDoc = docMapper.parse(
                SourceToParse.source("test", "_doc", "1", firstTimeSourceBytes, XContentType.JSON));
        IndexReader secondTimeReader = MemoryIndex.fromDocument(secondTimeDoc.rootDoc(), new MockAnalyzer(random()))
                .createSearcher().getIndexReader();
        String secondTimeSource = fromIndex(docMapper, secondTimeReader).utf8ToString();

        /*
         * Check that the source generated by going through Lucene the first
         * time matches the source generated by going through a second time.
         * This isn't as as strong an assertion as we'd like but it is easy
         * to perform and produces a nice error message on failure.
         */
        logger.info("comparing\n mapping:{}\noriginal:{}\n   first:{}\n  second:{}\n",
                docMapper.mappingSource(), originalSource.utf8ToString(), firstTimeSource, secondTimeSource);
        assertEquals(firstTimeSource, secondTimeSource);

        /*
         * Check that the document generated from the source synthesized from
         * the first index matches the document generated by the original
         * source. This isn't nearly as simple to assert as the source
         * comparison above and the error message will be much less telling
         * but it is much more thorough.
         */
        assertEquals(firstTimeDoc, secondTimeDoc);
    }

    /**
     * Enables source relocation then verifies that loading the field from
     * the translog produces the same result as loading the same field from
     * a document saved with source relocation.
     */
    public final void testLoadFromTranslog() throws IOException {
        DocumentMapper docMapper = parser.parse("_doc", relocateToDocValueMapping());

        XContentBuilder builder = XContentFactory.jsonBuilder();
        builder.startObject().field("field");
        writeRandomValue(builder);
        builder.endObject();
        BytesReference originalSource = BytesReference.bytes(builder);
        ParsedDocument doc = docMapper.parse(SourceToParse.source("test", "_doc", "1", originalSource, XContentType.JSON));

        IndexReader reader = MemoryIndex.fromDocument(doc.rootDoc(), new MockAnalyzer(random())).createSearcher().getIndexReader();
        String fromIndex = fromIndex(docMapper, reader).utf8ToString();
        String fromTranslog = fromTranslog(docMapper, originalSource).utf8ToString();
        logger.info("comparing\n      mapping:{}\n     original:{}\n   from index:{}\nfrom translog:{}\n",
                docMapper.mappingSource(), originalSource.utf8ToString(), fromIndex, fromTranslog);
        assertEquals(fromIndex, fromTranslog);
    }

    private BytesReference fromIndex(DocumentMapper docMapper, IndexReader reader) throws IOException {
        SourceLoader sourceLoader = SourceLoader.forReadingFromIndex(docMapper.sourceRelocationHandlers(), indexService.fieldDataLookup());
        FieldsVisitor fieldVisitor = new FieldsVisitor(sourceLoader);
        reader.document(0, fieldVisitor);
        fieldVisitor.postProcess(indexService.mapperService());
        assertThat(reader.leaves(), hasSize(1));
        sourceLoader.load(reader.leaves().get(0), 0);
        return sourceLoader.source();
    }

    private BytesReference fromTranslog(DocumentMapper docMapper, BytesReference fromTranslog) throws IOException {
        SourceLoader sourceLoader = SourceLoader.forReadingFromTranslog(docMapper.translogSourceNormalizingFilter());
        sourceLoader.setLoadedSource(fromTranslog);
        sourceLoader.load(null, 0);
        return sourceLoader.source();
    }

    private CompressedXContent relocateToDocValueMapping() throws IOException {
        XContentBuilder builder = XContentFactory.jsonBuilder();
        builder.startObject();
        {
            builder.startObject("_doc");
            {
                builder.startObject("properties");
                {
                    builder.startObject("field");
                    {
                        builder.field("type", fieldType());
                        builder.field("relocate_to", "doc_values");
                        extraMappingConfiguration(builder);
                    }
                    builder.endObject();
                }
                builder.endObject();
            }
            builder.endObject();
        }
        builder.endObject();
        return new CompressedXContent(Strings.toString(builder));
    }

    private void assertEquals(ParsedDocument expected, ParsedDocument actual) {
        assertThat(actual.docs(), hasSize(expected.docs().size()));
        for (int i = 0; i < actual.docs().size(); i++) {
            assertEquals(expected.docs().get(i), actual.docs().get(i));
        }
    }

    private void assertEquals(Document expected, Document actual) {
        assertEquals(expected.getPath(), actual.getPath());
        assertEquals(expected.getPrefix(), actual.getPrefix());
        assertThat(actual.getFields(), hasSize(expected.getFields().size()));
        for (int i = 0; i < actual.getFields().size(); i++) {
            assertEquals(expected.getFields().get(i), actual.getFields().get(i));
        }
    }

    private void assertEquals(IndexableField expected, IndexableField actual) {
        // NOCOMMIT jpountz review: is this good enough?
        logger.info("comparing {} and {}", expected, actual);
        assertEquals(expected.name(), actual.name());
        assertEquals(expected.fieldType(), actual.fieldType());

        // These are sorted in order of ease of reading the error
        assertEquals(expected.numericValue(), actual.numericValue());
        assertEquals(expected.stringValue(), actual.stringValue());
        assertEquals(expected.binaryValue(), actual.binaryValue());
        assertEquals(expected.readerValue(), actual.readerValue());
    }
}
